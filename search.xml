<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo搭建</title>
      <link href="/2020/01/24/build-hexo/"/>
      <url>/2020/01/24/build-hexo/</url>
      
        <content type="html"><![CDATA[<p>今天是2020年的除夕。时光犹如白驹过隙，转眼又将开启崭新的一年。</p><p>过去的25年是美好而短暂的，美在成就了如今的我，短于日子走得太快，忘了仔细地去记录。这也是偶尔令我感到些许遗憾的。人们常说 <em>“种一棵树最好的时间是十年前，其次是现在”</em> ，经营一片自己专属的地界亦如是。由此，我花了些时间搭建了自己的第一个博客，并写下此文加以记录。</p><h2 id="博客选型"><a href="#博客选型" class="headerlink" title="博客选型"></a>博客选型</h2><p>现如今，市面上博客相关的工具和产品繁多，涵盖了<a href="https://www.yuque.com/" target="_blank" rel="noopener">语雀</a>、<a href="https://www.jianshu.com/" target="_blank" rel="noopener">简书</a>、<a href="https://www.cnblogs.com/" target="_blank" rel="noopener">博客园</a>、<a href="https://juejin.im/" target="_blank" rel="noopener">掘金</a>、<a href="https://www.zhihu.com/" target="_blank" rel="noopener">知乎</a>等在线承载文字平台，也包括了<a href="https://www.gitbook.com/" target="_blank" rel="noopener">Gitbook</a>、<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>、<a href="http://jekyllcn.com/" target="_blank" rel="noopener">Jekyll</a>、<a href="https://vuepress.vuejs.org/" target="_blank" rel="noopener">Vuepress</a>等静态独立博客工具，更有<a href="http://www.ghostchina.com/" target="_blank" rel="noopener">Ghost</a>这样支持后台的博客系统。</p><table>  <thead>  <tr>    <th style="min-width: 20px;"></th>    <th style="min-width: 120px;">名称</th>    <th>特点</th>    <th style="min-width: 102px;">可独立部署</th>    <th style="min-width: 88px;">集成后台</th>    <th style="min-width: 102px;">技术支持</th>    <th style="min-width: 88px;">SEO效果</th>  </tr>  </thead>  <tbody>  <tr>    <td style="min-width: 0; text-align: center;">1</td>    <td>语雀</td>    <td>优雅高效的在线文档编辑与协同工具</td>    <td>否</td>    <td>否</td>    <td>阿里巴巴</td>    <td></td>  </tr>  <tr>    <td style="min-width: 0; text-align: center;">2</td>    <td>简书</td>    <td>优质的创作社区</td>    <td>否</td>    <td>否</td>    <td></td>    <td></td>  </tr>  <tr>    <td style="min-width: 0; text-align: center;">3</td>    <td>博客园</td>    <td>面向开发者的知识分享社区</td>    <td>否</td>    <td>否</td>    <td></td>    <td></td>  </tr>  <tr>    <td style="min-width: 0; text-align: center;">4</td>    <td>掘金</td>    <td>帮助开发者成长的社区</td>    <td>否</td>    <td>否</td>    <td></td>    <td>有副作用</td>  </tr>  <tr>    <td style="min-width: 0; text-align: center;">5</td>    <td>知乎</td>    <td>中文互联网最大的知识平台</td>    <td>否</td>    <td>否</td>    <td></td>    <td></td>  </tr>  <tr>    <td style="min-width: 0; text-align: center;">6</td>    <td>SegmentFault</td>    <td>中国领先的开发者技术社区</td>    <td>否</td>    <td>否</td>    <td></td>    <td>适合导流</td>  </tr>  <tr>    <td style="min-width: 0; text-align: center;">7</td>    <td>Gitbook</td>    <td>适合搭建技术文档、编写电子书</td>    <td>是</td>    <td>否</td>    <td>Github/Git</td>    <td></td>  </tr>  <tr>    <td style="min-width: 0; text-align: center;">8</td>    <td>Hexo</td>    <td>      <ul>        <li>产品成熟</li>        <li>生成速度快</li>        <li>使用简单</li>        <li>插件丰富</li>      </ul>    </td>    <td>是</td>    <td>否</td>    <td>Node.js</td>    <td></td>  </tr>  <tr>    <td style="min-width: 0; text-align: center;">9</td>    <td>Jekyll</td>    <td>是 GitHub Pages 背后的引擎</td>    <td>是</td>    <td>否</td>    <td>Ruby</td>    <td></td>  </tr>  <tr>    <td style="min-width: 0; text-align: center;">10</td>    <td>Vuepress</td>    <td>      <ul>        <li>单页应用</li>        <li>简洁至上</li>      </ul>    </td>    <td>是</td>    <td>否</td>    <td>Vue</td>    <td></td>  </tr>  <tr>    <td style="min-width: 0; text-align: center;">11</td>    <td>Docz</td>    <td>      <ul>        <li>单页应用</li>        <li>零配置</li>        <li>可插拔</li>      </ul>    </td>    <td>是</td>    <td>否</td>    <td>Webpack 4</td>    <td></td>  </tr>  <tr>    <td style="min-width: 0; text-align: center;">12</td>    <td>Ghost</td>    <td>      <ul>        <li>自带功能强大的后台</li>        <li>支持多人协作</li>        <li>插件丰富</li>        <li>部署简单</li>        <li>UI美观</li>      </ul>    </td>    <td>是</td>    <td>是</td>    <td>Node.js</td>    <td>较好</td>  </tr>  <tr>    <td style="min-width: 0; text-align: center;">13</td>    <td>Solo</td>    <td>专为程序员设计的、小而美的开源博客系统</td>    <td>是</td>    <td>是</td>    <td>Java</td>    <td></td>  </tr>  </tbody></table><p>这些工具大多都支持现在流行的 <code>Markdown</code> 标记语言，书写简洁高效。</p><p>简书、博客园这些平台可以直接注册使用，写文章发表的用户交互好，SEO做得也不错，但缺点是容易受到平台的约束，还有广告。而自己租赁服务器、购买域名搭建博客，尽管自由度高，但成本昂贵，开发和维护也很耗费精力和时间。相较这两种，还有一个折中的方案，就是将生成的静态页面托管在Github、Coding等平台上。</p><p>我本是 <strong>信息管理</strong> 专业出身，校园里有幸拜师入门习得一知半解，毕业后去动物园做起 <strong>程序猿</strong> 。学信管的，本身便懂些信息存取的法门；编程又是一项很实用的技能。两者结合，既考虑信息的存取成本和展现形式，又追求技术上的前卫和开放自由。搭建博客的目的 <em>不是折腾技术，而是记录所见所想、多输出一些高质量的文章</em> 。于是我选择了Hexo——由 <code>Node.js</code> 支持、简单而功能强大的博客框架，以便更专注于写作。</p><hr><h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>依照<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官网文档</a>的说明，Hexo是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>本站就是一个很好的例子。</p><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Hexo的安装非常容易，有编程基础的朋友也可以参照<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官网文档</a>完成此步骤。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>在安装Hexo前，我们需要先安装<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>和<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>。这两样工具的安装相对简单，只需移步至其官网，下载对应操作系统的安装包，按照引导完成安装即可。此处不做赘述。</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>安装完 <code>Node.js</code> 后，就可以通过 <code>npm</code> 安装Hexo了。</p><p>打开命令行，执行如下命令。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>值得一提的是，由于 <code>npm</code> 使用的是国外的源，网络不稳定且可能被墙。推荐使用更加稳定快速的<a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝镜像</a>。配置淘宝镜像后，文章中的 <code>npm</code> 命令均可使用 <code>cnpm</code> 代替。</p><hr><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>安装完成后，便可以依照<a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">文档</a>开始建站了。</p><p>执行下面的命令初始化我们的第一个博客项目。</p><pre class="line-numbers language-bash"><code class="language-bash">hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span><span class="token function">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建完成后，项目的目录结构如下。</p><pre><code>.├── scaffolds├── source # 源文件目录├── themes # 主题目录├── _config.yml # 配置文件└── package.json</code></pre><p>其中， <code>_config.yml</code> 是博客的配置文件， <code>source</code> 目录用于存放文章的源文件， <code>themes</code> 目录用于存放主题，默认有 <code>landscape</code> 主题。</p><hr><h2 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h2><p>打开命令行，cd至项目所在目录，执行命令。</p><pre class="line-numbers language-bash"><code class="language-bash">hexo generatehexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行 <code>hexo generate</code> 或 <code>hexo g</code> 命令会生成 <code>public</code> 目录，用于存放Hexo生成的静态页面。</p><pre><code>.├── public # 编译生成的静态文件├── scaffolds├── source├── themes├── _config.yml└── package.json</code></pre><p>继续执行 <code>hexo server</code> 或 <code>hexo s</code> 命令，启动server服务。</p><p><img src="http://q4kbn37nl.bkt.clouddn.com/hexo-server.png?e=1579882840&token=0QXSKIUWEaWqa_m3RP0dA04KO2cPXzgzVsWCBGHf:PQe9BimqgGe37rRNvPFAzHenSGQ" alt=""></p><p>执行命令后，打开浏览器，输入 <code>localhost:4000</code> ，即可访问我们的第一个博客网站。</p><p><img src="http://q4kbn37nl.bkt.clouddn.com/hexo-init-page.png?e=1579883002&token=0QXSKIUWEaWqa_m3RP0dA04KO2cPXzgzVsWCBGHf:BHUuNzGjZqACRuo5pctN5FGpKGg" alt=""></p><hr><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>执行如下命令创建一篇新文章或者新的页面。</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以在命令中指定文章的布局（layout）： <code>post</code> 、 <code>page</code> 和 <code>draft</code> ，默认为 <code>post</code>。</p><p>在创建这三种不同类型的文件时，它们将会被保存到不同的目录；而自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 目录下。</p><table><thead><tr><th>布局</th><th>存放目录</th></tr></thead><tbody><tr><td><code>post</code></td><td><code>source/_posts</code></td></tr><tr><td><code>page</code></td><td><code>source</code></td></tr><tr><td><code>draft</code></td><td><code>source/_drafts</code></td></tr></tbody></table><p>执行命令后，可以在 <code>source</code> 目录下看到新建的 <code>.md</code> 文件。</p><pre><code>.├── public├── scaffolds├── source # page类型文件|   ├── _drafts # draft类型文件|   └── _posts # post类型文件├── themes├── _config.yml└── package.json</code></pre><p>编辑 <code>source</code> 目录下的文件，开始我们的写作。</p><p>关于Hexo的更多用法，可以参照<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a>自行尝试。</p><hr><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>Hexo有丰富的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a>，默认的是 <code>landscape</code> ，可以根据自己的喜好挑选和更换。</p><p>我选择的主题是<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">Matery</a>。在其GitHub链接上下载该主题，解压后命名为 <code>matery</code> ，存放至 <code>themes</code> 目录下。</p><p>然后编辑 <code>_config/yml</code> 文件中的配置信息，将 <code>theme</code> 修改为themes目录下的主题目录名。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Extensions</span><span class="token comment" spellcheck="true">## Plugins: https://hexo.io/plugins/</span><span class="token comment" spellcheck="true">## Themes: https://hexo.io/themes/</span><span class="token key atrule">theme</span><span class="token punctuation">:</span> matery<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样便完成了更换主题的操作。</p><p>Matery主题提供了相对美观的菜单、封面、主页、视频和音乐等组件。我们可以在 <code>themes/matery/_config.yml</code> 主题配置文件里更改相关的配置，来更改这些组件的配置和个人信息的配置。</p><p>此外，我们还需对 <code>标签</code> 、 <code>分类</code> 、 <code>关于</code> 、 <code>留言板</code> 和 <code>友情链接</code> 菜单，创建相应的界面文件。</p><p>执行 <code>hexo new page categories</code> 命令创建分类页，会在 <code>source</code> 目录下生成 <code>categories/index.md</code> 文件，并使其包含如下内容。</p><pre><code>---title: categoriesdate: 2020-01-23 15:40:00type: categorieslayout: categories---</code></pre><p>同样地，创建标签页 <code>tags/index.md</code> ，使其包含如下内容。</p><pre><code>---title: tagsdate: 2020-01-23 15:40:26type: tagslayout: tags---</code></pre><p>以此类推，继续创建 <code>about</code> 、 <code>contact</code> 和 <code>friends</code> 页面。这样一来，博客的菜单都可以点击了。</p><p>至此，项目的目录结构会像下面这样。</p><pre><code>.├── public├── scaffolds├── source|   ├── _drafts|   ├── _posts|   ├── about # 关于|   |   └── index.md|   ├── categories # 分类|   |   └── index.md|   ├── contact # 留言板|   |   └── index.md|   ├── friends # 友情链接|   |   └── index.md|   └── tags # 标签|       └── index.md├── themes|   ├── landscape # 默认主题|   └── matery # 我选择的 Matery 主题├── _config.yml└── package.json</code></pre><p>该主题的更多用法，还可以参照<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">Matery</a>文档继续尝试。</p><hr><h2 id="部署至GitHub"><a href="#部署至GitHub" class="headerlink" title="部署至GitHub"></a>部署至GitHub</h2><p>经过前面的努力，我们的博客已经可以在本地运行了。</p><p>但如果想让其他人人访问我们的博客，我们还需要找一台服务器，将博客部署上去。<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a>就可以免费充当这样的服务器。</p><p>接下来，我们将博客部署至GitHub，让朋友们都能访问。</p><h3 id="创建GitHub个人仓库"><a href="#创建GitHub个人仓库" class="headerlink" title="创建GitHub个人仓库"></a>创建GitHub个人仓库</h3><p>登录<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>，点击 <code>New repository</code> 创建一个名为 <code>&lt;username&gt;.github.io</code> 的仓库。其中 <code>username</code> 是用户名，比如我的GitHub用户名是 <code>rainstopper</code> ，我创建的仓库名称就是 <code>rainstopper.github.io</code> 。</p><h3 id="添加GitHub-SSH配置"><a href="#添加GitHub-SSH配置" class="headerlink" title="添加GitHub SSH配置"></a>添加GitHub SSH配置</h3><p>为GitHub添加SSH配置，可以在后续Git代码进行 <code>push</code> 操作时，跳过用户名和密码的输入，更加便利。不介意每次提交都输密码，或者有安全及其他方面考虑的，也可以跳过此步骤。</p><p>打开 <code>Git Bash</code> ，执行如下命令设置Git的用户名和邮箱信息。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token operator">&lt;</span>username<span class="token operator">></span><span class="token function">git</span> config --global user.email <span class="token operator">&lt;</span>email<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以使用以下命令检查配置是否生效。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config user.name<span class="token function">git</span> config user.email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行以下命令创建SSH秘钥文件。</p><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token operator">&lt;</span>email<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个过程中会提示输入文件名，也可以不设置，一路回车。</p><p><img src="http://q4kbn37nl.bkt.clouddn.com/generate-ssh-key.png?e=1579891710&token=0QXSKIUWEaWqa_m3RP0dA04KO2cPXzgzVsWCBGHf:JZD8R9_SaZxT5rxAEDAlwVE2iMk" alt=""></p><p>最后会提示在用户目录下生成了 <code>.ssh</code> 文件夹，里面包含了 <code>id_rsa</code> 私钥文件和 <code>id_rsa.pub</code> 公钥文件。</p><p>在GitHub的 <code>Settings</code> 中找到 <code>SSH and GPG keys</code> 的配置页面，点击 <code>New SSH key</code> 按钮，在 <code>title</code> 中输入自定义的名称，将 <code>id_rsa.pub</code> 文件中的内容拷贝至 <code>Key</code> ，完成SSH秘钥的创建。</p><p><img src="http://q4kbn37nl.bkt.clouddn.com/github-ssh.png?e=1579891366&token=0QXSKIUWEaWqa_m3RP0dA04KO2cPXzgzVsWCBGHf:duNvV4Ij1lXBPpJHiVfB2OR42Y8" alt=""></p><p>使用以下命令验证SSH的配置是否生效。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现以下提示信息时，即为配置成功。</p><p><img src="http://q4kbn37nl.bkt.clouddn.com/test-github-ssh.png?e=1579891976&token=0QXSKIUWEaWqa_m3RP0dA04KO2cPXzgzVsWCBGHf:v38GguGs12J7jfuwfowPInGShZc" alt=""></p><h3 id="将Hexo生成的静态页面托管至GitHub"><a href="#将Hexo生成的静态页面托管至GitHub" class="headerlink" title="将Hexo生成的静态页面托管至GitHub"></a>将Hexo生成的静态页面托管至GitHub</h3><p>有了GitHub仓库，我们就能将Hexo生成的静态页面托管至GitHub。</p><p>如下修改项目的配置文件 <code>_config.yml</code> 。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Deployment</span><span class="token comment" spellcheck="true">## Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>&lt;username<span class="token punctuation">></span>/&lt;username<span class="token punctuation">></span>.github.io.git <span class="token comment" spellcheck="true"># GitHub仓库的ssh链接</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来执行以下命令安装Hexo的Git发布插件 <code>hexo-deployer-git</code> 。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后执行以下命令，将项目部署至GitHub。</p><pre class="line-numbers language-bash"><code class="language-bash">hexo cleanhexo generatehexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中 <code>hexo clean</code> 或 <code>hexo cl</code> 命令会清理之前生成的文件； <code>hexo deploy</code> 或 <code>hexo d</code> 命令进行部署。</p><p>部署完成后，我们的项目目录中会出现一个 <code>.deploy_git</code> 目录，其中的代码就是 <code>push</code> 至GitHub仓库中的静态文件。</p><pre><code>.├── .deploy_git # 部署至GitHub的静态文件├── public├── scaffolds├── source├── themes├── _config.yml└── package.json</code></pre><p>然后我们就能在浏览器打开 <code>&lt;username&gt;.github.io</code> 访问自己的博客了（可能需要稍等一会儿）。赶紧将地址奔走相告，让小伙伴们也体验一下我们自己搭建的博客吧~</p><p>至此，我们已经完成了博客的基本搭建过程。</p><hr><h2 id="多终端工作"><a href="#多终端工作" class="headerlink" title="多终端工作"></a>多终端工作</h2><p>经过上面的操作，我们已经完成了GitHub的部署，让朋友们都能访问我们的博客了。</p><p>可仔细看GitHub仓库中的文化，发现都是编译够生成的代码，而没有我们编写博客时的源文件。假如我们需要重装操作系统或者更换电脑，就可能会丢失这些源文件。</p><p>这时，我们可以利用GitHub分支来实现源代码的管理，以便在多个终端下都能进行写作。</p><h3 id="创建GitHub分支"><a href="#创建GitHub分支" class="headerlink" title="创建GitHub分支"></a>创建GitHub分支</h3><p>进入我们之前创建好的GitHub仓库，在 <code>Code</code> 菜单下点击 <code>Branch:master</code> 按钮，新建一个名为 <code>hexo-source</code> 的分支，并将其设置为默认分支。</p><p><img src="http://q4kbn37nl.bkt.clouddn.com/github-branch-hexo-source.png?e=1579894028&token=0QXSKIUWEaWqa_m3RP0dA04KO2cPXzgzVsWCBGHf:p8fSwlsoS5MJA2UTKOVNUg5tJco" alt=""></p><h3 id="上传源代码"><a href="#上传源代码" class="headerlink" title="上传源代码"></a>上传源代码</h3><p>执行以下命令将仓库 <code>clone</code> 到本地（会自动命名为 <code>&lt;username&gt;.github.io</code> ），其中的链接就是GitHub仓库的https链接。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/<span class="token operator">&lt;</span>username<span class="token operator">></span>/<span class="token operator">&lt;</span>username<span class="token operator">></span>.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>紧接着将博客项目的完整代码拷贝至其中，执行以下命令。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token operator">&lt;</span>username<span class="token operator">></span>.github.io<span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">"上传博客项目源文件"</span><span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>push</code> 命令时可能需要输入GitHub的用户名和密码。</p><p><code>push</code> 完成后，便可以在仓库的 <code>hexo-source</code> 分支下看到我们项目中的源代码，而 <code>master</code> 分支下依然是由Hexo生成的静态文件。</p><p>建议每次完成写作时，都依次执行上述命令，将自己的源文件 <code>push</code> 至GitHub仓库中，以防丢失。</p><h3 id="更换终端"><a href="#更换终端" class="headerlink" title="更换终端"></a>更换终端</h3><p>当我们需要更换终端时，依次安装 <code>Git</code> 和 <code>Node.js</code> ，执行 <code>npm install -g hexo-cli</code> 命令安装Hexo，设置GitHub的SSH Key，再将GitHub仓库 <code>clone</code> 到本地，即可继续博客的写作。</p><p>至此，我们已经可以投入到博客的写作中去了。</p><hr><h2 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h2><p>我觉得 <code>&lt;username&gt;.github.io</code> 这个地址不够逼格，想要一个自己专属的域名，用它来访问我们的博客。</p><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><p>我们可以在<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">阿里云</a>上查询和购买域名。</p><p>最常用的域名是 <code>.com</code> ，价格比较昂贵；其次是 <code>.com.cn</code> 、 <code>.cn</code> 和 <code>.net</code> 。然而这些常用的域名大多都已经被注册了。</p><p>剩下的还有 <code>.site</code> 、 <code>.top</code> 、 <code>.vip</code> 等域名，只要能备案就行。我买的是 <code>sunyt.site</code> （以我中文名的缩写命名）。</p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>购买完成后，需要先进行实名认证，再进入<a href="https://dns.console.aliyun.com/" target="_blank" rel="noopener">阿里云控制台</a>的域名解析设置菜单，做域名解析的配置。</p><p>可以直接使用 <code>新手引导</code> 按钮，它会自动添加主机记录为 <code>@</code> 和 <code>www</code> 、解析线路为 <code>默认</code> 的两条配置。</p><p><img src="http://q4kbn37nl.bkt.clouddn.com/aliyun-dns-guide.png?e=1579896004&token=0QXSKIUWEaWqa_m3RP0dA04KO2cPXzgzVsWCBGHf:IwzoBZ4z-sE66szbZ6VwSiJaXNo" alt=""></p><p>其中的记录值，我们可以先在命令行中通过 <code>ping &lt;username&gt;.github.io</code> 获取到项目在GitHub服务器上所在的IP地址，将其填入。</p><h3 id="修改GitHub仓库配置"><a href="#修改GitHub仓库配置" class="headerlink" title="修改GitHub仓库配置"></a>修改GitHub仓库配置</h3><p>在GitHub仓库的 <code>Settings</code> 菜单下找到 <code>Custom domain</code> ，设置域名并保存。</p><p><img src="http://q4kbn37nl.bkt.clouddn.com/github-settings-custom-domain.png?e=1579896418&token=0QXSKIUWEaWqa_m3RP0dA04KO2cPXzgzVsWCBGHf:xBGBLkVCOB_Xqruz4Wvz7iOezqo" alt=""></p><h3 id="修改项目配置并重新部署"><a href="#修改项目配置并重新部署" class="headerlink" title="修改项目配置并重新部署"></a>修改项目配置并重新部署</h3><p>在项目 <code>source</code> 目录下新建一个名为 <code>CNAME</code> 的文件（注意没有后缀名），在文件内写上自己的域名，比如 <code>sunyt.site</code> 。</p><pre><code>.├── .deploy_git├── public├── scaffolds├── source|   ├── _drafts|   ├── _posts|   ...|   └── CNAME├── themes├── _config.yml└── package.json</code></pre><p>执行以下命令重新部署。</p><pre class="line-numbers language-bash"><code class="language-bash">hexo cleanhexo generatehexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>过不了多久，在浏览器中输入我的域名 <code>sunyt.site</code> ，就能访问我在GitHub托管的博客了。</p><hr><h2 id="部署至Coding实现国内外分流"><a href="#部署至Coding实现国内外分流" class="headerlink" title="部署至Coding实现国内外分流"></a>部署至Coding实现国内外分流</h2><p>我们已经将Hexo博客部署在GitHub上了，但GitHub是国外的，而且百度的蜘蛛不能爬取GitHub。如果希望我们的博客被百度收录，而且能更快地访问，可以同时在国内的<a href="https://coding.net/" target="_blank" rel="noopener">Coding</a>平台做托管。这么一来，在国内访问的是Coding，国外就走GitHub。</p><h3 id="创建Coding项目"><a href="#创建Coding项目" class="headerlink" title="创建Coding项目"></a>创建Coding项目</h3><p>申请一个Coding账户，然后创建一个项目，项目的名称可以是任意的，我创建的项目名称与此前在GitHub上的用户名相同。</p><h3 id="添加SSH配置"><a href="#添加SSH配置" class="headerlink" title="添加SSH配置"></a>添加SSH配置</h3><p>这一步也和GitHub一样。添加完成后，验证一下是否生效。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@e.coding.net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改项目配置实现多平台部署"><a href="#修改项目配置实现多平台部署" class="headerlink" title="修改项目配置实现多平台部署"></a>修改项目配置实现多平台部署</h3><p>修改项目 <code>_config.yml</code> 文件中的配置。其中 <code>github</code> 和 <code>coding</code> 分别填写GitHub仓库和Coding项目的ssh链接。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Deployment</span><span class="token comment" spellcheck="true">## Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span>    <span class="token key atrule">github</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>rainstopper/rainstopper.github.io.git<span class="token punctuation">,</span>master    <span class="token key atrule">coding</span><span class="token punctuation">:</span> git@e.coding.net<span class="token punctuation">:</span>rainstopper/rainstopper.git<span class="token punctuation">,</span>master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行以下命令重新部署。</p><pre class="line-numbers language-bash"><code class="language-bash">hexo cleanhexo generatehexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>部署的过程中，我们会看到先往GitHub仓库执行了一次 <code>push</code> 操作，紧接着又往Coding项目上也 <code>push</code> 了一次。</p><p>部署完成后，打开Coding项目代码，我们会看到与GitHub相同的Hexo静态文件。</p><p>随即在Coding上部署项目，并设置自定义域名为自己的域名 <code>sunyt.site</code> 。</p><p><img src="http://q4kbn37nl.bkt.clouddn.com/coding-deploy-setting.png?e=1579899019&token=0QXSKIUWEaWqa_m3RP0dA04KO2cPXzgzVsWCBGHf:OyAp31x2qJBjjqs52UNHOhts1H4" alt=""></p><h3 id="修改域名解析配置"><a href="#修改域名解析配置" class="headerlink" title="修改域名解析配置"></a>修改域名解析配置</h3><p>回到<a href="https://dns.console.aliyun.com/" target="_blank" rel="noopener">阿里云控制台</a>，将原来指向GitHub配置的解析路线改为 <code>境外</code> ，再分别添加主机记录为 <code>@</code> 和 <code>www</code> 的两条记录，记录类型选择 <code>默认</code> ，记录值填写Coding项目的静态网站域名。</p><p><img src="http://q4kbn37nl.bkt.clouddn.com/aliyun-dns-setting-github-and-coding.png?e=1579899444&token=0QXSKIUWEaWqa_m3RP0dA04KO2cPXzgzVsWCBGHf:MqbSUQGDtVH4Uw6vY1sI9PDC0c0" alt=""></p><p>不一会儿，我们在国内访问域名 <code>sunyt.site</code> 就会访问到托管至Coding的页面了。</p><p>我们可以通过在国内 <code>ping sunyt.site</code> 和 <code>ping ssd38z.coding-pages.com</code> ，观察解析到的IP地址是不是相同的，来验证域名解析的正确性。</p><p>至此，我们的博客已经在GitHub和Coding双向部署，并通过域名解析，对国内外进行分流。</p><hr><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><h3 id="使用七牛云存储图片-2020-1-24"><a href="#使用七牛云存储图片-2020-1-24" class="headerlink" title="使用七牛云存储图片 2020.1.24"></a>使用七牛云存储图片 2020.1.24</h3><p>Hexo支持使用 <code>hexo-asset-image</code> 插件内联图片，该插件会在创建文章的同时，在同一目录下创建与其同名的目录，用来存放图片文件，使用非常方便，但缺点也显而易见： <code>source</code> 目录会很庞大，且内联图片会影响页面的渲染速度。</p><p>更好的做法是使用第三方平台来存储图片，我使用的是<a href="https://portal.qiniu.com/" target="_blank" rel="noopener">七牛云</a>。</p><p>创建七牛云账号后，需要先进行实名认证，再在控制台打开 <code>对象存储</code> 下的 <code>空间管理</code> 菜单，去新建空间，否则会报 <code>403：没有权限</code> 。</p><p>写作时如果遇到图片，只需将其上传至七牛云，再在需要插入图片的位置添加Markdown标记 <code>![](&lt;url&gt;)</code> 即可。</p><hr><h3 id="代码块样式优化-2020-1-24"><a href="#代码块样式优化-2020-1-24" class="headerlink" title="代码块样式优化 2020.1.24"></a>代码块样式优化 2020.1.24</h3><p>默认的代码块生成会编译出 <code>&lt;table&gt;</code> 元素，使用左右两个 <code>&lt;td&gt;</code> 分别展示行号和代码内容，与Matery主题的样式有冲突，非常不美观。</p><p>解决方法是安装 <code>hexo-prism-plugin</code> 插件。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-prism-plugin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>紧接着，按照该插件的<a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">文档</a>描述，修改项目配置文件 <code>_config.yml</code> 。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 关闭默认的代码高亮配置</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span> <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># default false</span>  custom_css<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，重新生成代码即可。</p><pre class="line-numbers language-bash"><code class="language-bash">hexo clhexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 个人博客 </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《中国优势》读书笔记</title>
      <link href="/2020/01/23/reading-notes-of-the-indispensable-china/"/>
      <url>/2020/01/23/reading-notes-of-the-indispensable-china/</url>
      
        <content type="html"><![CDATA[<p>努力阅读中ing…</p>]]></content>
      
      
      <categories>
          
          <category> 终身学习 </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中国优势 </tag>
            
            <tag> 创新 </tag>
            
            <tag> 科技 </tag>
            
            <tag> 中国制造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概念手册</title>
      <link href="/2020/01/23/concept-handbook/"/>
      <url>/2020/01/23/concept-handbook/</url>
      
        <content type="html"><![CDATA[<p>持续收录学习过程中接触到的各类名词概念及解释。</p><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h3 id="沉没成本"><a href="#沉没成本" class="headerlink" title="沉没成本"></a>沉没成本</h3><p>指以往发生的，但与当前决策无关的费用。</p><p>相关：王煜全《中国优势》P.13<br>收录时间：2020.1.23</p><h3 id="产品侧创新与产业侧创新"><a href="#产品侧创新与产业侧创新" class="headerlink" title="产品侧创新与产业侧创新"></a>产品侧创新与产业侧创新</h3><table><thead><tr><th>概念</th><th>定义</th><th>描述</th></tr></thead><tbody><tr><td>产品侧创新</td><td>科研和产品化</td><td>从0到1，研发出产品</td></tr><tr><td>产业侧创新</td><td>量产和市场</td><td>从1到100万，实现产品的量产</td></tr></tbody></table><p>要提高创新的成功率，越往后走，越是产业侧在起作用。</p><p>出自：王煜全《中国优势》P.36<br>收录时间：2020.1.23</p><h3 id="创新效率"><a href="#创新效率" class="headerlink" title="创新效率"></a>创新效率</h3><p>“创新效率”是一个可以用来衡量经济体或者企业整体的创新能力的指标。它包括三个维度：创新的质量、创新的成功率和创新的数量。</p><p>出自：王煜全《中国优势》P.6<br>收录时间：2020.1.23</p><hr><h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><h3 id="《杜拜法案》"><a href="#《杜拜法案》" class="headerlink" title="《杜拜法案》"></a>《杜拜法案》</h3><p>1980年12月12日，美国国会通过了《杜拜法案》，也称《大学和小企业专利程序法案》。它的核心即确立高校对知识产权的所有权。</p><ul><li>将专利的所有权和商业开发权分离<br>《杜拜法案》规定，专利的所有权属于高校，高校可以向企业授予专利的独家商业权益。<br>这个设计的巧妙之处在于，专利的所有权和商业开发权是分开的，高校以相对较低的价格将独家商业开发权转让给企业后，知识产权仍然归高校所有，教授可以继续做科学研究。</li><li>鼓励将科技转化成产品<br>《杜拜法案》还规定，如果企业取得专利后，没有试图把技术商业化，技术转让办公室就有责任取消这个专利权。换句话说，《杜拜法案》虽然保护企业的独家商业权益，但这个保护是有条件的，企业必须尽快研发出产品，把产品推向全社会。</li><li>把创新的主导者从原来的科学家变成了企业家。</li></ul><p>相关：王煜全《中国优势》P.26<br>收录时间：2020.1.23</p><hr><h2 id="G"><a href="#G" class="headerlink" title="G"></a>G</h2><h3 id="工业4-0"><a href="#工业4-0" class="headerlink" title="工业4.0"></a>工业4.0</h3><table><thead><tr><th>阶段</th><th>描述</th></tr></thead><tbody><tr><td>工业1.0</td><td>蒸汽机时代</td></tr><tr><td>工业2.0</td><td>电气化时代</td></tr><tr><td>工业3.0</td><td>信息化时代</td></tr><tr><td>工业4.0</td><td>智能化时代</td></tr></tbody></table><p>相关：王煜全《中国优势》P.71<br>收录时间：2020.1.23</p><hr><h2 id="H"><a href="#H" class="headerlink" title="H"></a>H</h2><h3 id="黄埔军校效应"><a href="#黄埔军校效应" class="headerlink" title="黄埔军校效应"></a>黄埔军校效应</h3><p>王煜全把一家企业做大之后带动周边创业的现象，称为“黄埔军校效应”。</p><p>出自：王煜全《中国优势》P.95<br>收录时间：2020.1.23</p><hr><h2 id="K"><a href="#K" class="headerlink" title="K"></a>K</h2><h3 id="科技企业发展的三阶段"><a href="#科技企业发展的三阶段" class="headerlink" title="科技企业发展的三阶段"></a>科技企业发展的三阶段</h3><table>  <thead>  <tr>    <th style="min-width: 110px;">阶段</th>    <th style="min-width: 140px;">核心</th>    <th>特点</th>    <th>例子</th>  </tr>  </thead>  <tbody>  <tr>    <td>科技企业1.0</td>    <td>量产</td>    <td>      <ol>        <li>实现了量产；</li>        <li>企业和高校没有什么关系，新产品往往只是技术创新的产物；</li>        <li>企业在成立之前就已经拥有相对成熟的产品或技术了</li>      </ol>    </td>    <td>福特的汽车、爱迪生的灯泡</td>  </tr>  <tr>    <td>科技企业2.0</td>    <td>研发+量产</td>    <td>把研发周期放到了企业内部，先成立企业，融资，再去研发做产品</td>    <td>美国硅谷</td>  </tr>  <tr>    <td>科技企业3.0</td>    <td>科研+研发+量产</td>    <td>以高校为源头，以硬科技为特征，由科技企业家主导的“端到端”的创新</td>    <td>苹果、华为</td>  </tr>  </tbody></table><p>出自：王煜全《中国优势》P.16<br>收录时间：2020.1.23</p><h3 id="“跨越鸿沟”理论"><a href="#“跨越鸿沟”理论" class="headerlink" title="“跨越鸿沟”理论"></a>“跨越鸿沟”理论</h3><p>“跨越鸿沟”理论于1991年由美国科技领域营销大师杰弗里·摩尔（Geoffrey Moore）首次提出。他根据用户对新技术、新产品的接受度，将用户分为五类。</p><ol><li>创新者（innovators）：喜欢新东西，不在乎产品缺陷的用户；</li><li>早期使用者（early adopters）：第一批使用产品的非发烧友用户；</li><li>早期主流用户（early majority）：产品在市场上铺开一段时间后，才开始使用的用户；</li><li>晚期主流用户（late majority）：从众用户，在产品占领大部分市场后依靠别人推荐购买；</li><li>落伍者（laggards）：对高科技产品没有任何兴趣的人。<br><img src="http://q4kbn37nl.bkt.clouddn.com/%E2%80%9C%E8%B7%A8%E8%B6%8A%E9%B8%BF%E6%B2%9F%E2%80%9D%E7%90%86%E8%AE%BA.jpg?e=1579791349&token=0QXSKIUWEaWqa_m3RP0dA04KO2cPXzgzVsWCBGHf:wNX-eTWwjujZU8hKvmQaNGX43Fs" alt="“跨越鸿沟”理论图解"><br>创新者、早期使用者这两类属于早期用户，只占市场总量的16%。他们不仅懂技术，而且对新产品非常感兴趣，敢为天下先，即使产品不好用，也要先体验。比如，迄今为止，比特币钱包的用户使用体验极差，但很多比特币玩家还是在手机里装着这个应用。<br>这之后就存在着一个鸿沟。第三类早期主流用户更注重实用性，新技术被证明足够好用，他们才会采用。第四类是晚期主流用户，他们希望购买到这个行业的标准产品，只有看到周围的人都在使用，他们才会用。第三类和第四类是主流用户，占市场总量的68%。所以，企业大部分的利润掌握在这两类用户手中。 <strong>科技企业要做的就是跨越这一鸿沟，引爆早期主流用户。</strong> 只要获得了早期主流用户的认可，让其他人觉得这个新技术产品人人都在用，就容易推进到晚期主流用户中。反之，如果跨不过这个鸿沟，新的技术产品就会昙花一现，即使在前期备受瞩目，获得大量媒体报道，过不了多久，也会推出市场。<br>第五类是落伍者，这16%的用户排斥科技创新产品，比如那些迄今为止仍在用功能手机的人。企业要争取这部分用户需要付出的成本太高，可以放弃这部分市场。</li></ol><p>相关：王煜全《中国优势》P.77<br>收录时间：2020.1.23</p><hr><h2 id="M"><a href="#M" class="headerlink" title="M"></a>M</h2><h3 id="名校效应"><a href="#名校效应" class="headerlink" title="名校效应"></a>名校效应</h3><p>基于人脉网络的“名校效应”：学校越好，到好公司工作的毕业生就越多，出来创业的就越多；学校越好，好的技术就越多，以此创业成功的概率就越大。</p><p>出自：王煜全《中国优势》P.54<br>收录时间：2020.1.23</p><hr><h2 id="S"><a href="#S" class="headerlink" title="S"></a>S</h2><h3 id="示范效应"><a href="#示范效应" class="headerlink" title="示范效应"></a>示范效应</h3><p>消费者的消费行为要受到周围人的消费水准影响。</p><p>相关：王煜全《中国优势》P.39<br>收录时间：2020.1.23</p><h3 id="双长制"><a href="#双长制" class="headerlink" title="双长制"></a>双长制</h3><p>科技企业3.0的组织架构一般是“双长制”：一位有着丰富市场经验的首席执行官和一位有着深厚技术科研背景的首席科学家，双方合作，共同把一件高科技产品推向市场。</p><p>相关：王煜全《中国优势》P.57<br>收录时间：2020.1.23</p><hr><h2 id="W"><a href="#W" class="headerlink" title="W"></a>W</h2><h3 id="“微笑曲线”理论"><a href="#“微笑曲线”理论" class="headerlink" title="“微笑曲线”理论"></a>“微笑曲线”理论</h3><p>相关：王煜全《中国优势》P.33<br>收录时间：2020.1.23</p>]]></content>
      
      
      <categories>
          
          <category> 终身学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
            <tag> 手册 </tag>
            
            <tag> 词条 </tag>
            
            <tag> 速查 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
